import uvicorn
from fastapi import FastAPI, HTTPException
from schemes.task_schemes import TaskRegular, TaskSport, TaskWork
from models.task_model import TaskModel
from models.task_model import Base
from data.database_task import SessionDep_task
from data.database_task import task_engine

app = FastAPI(title='Focus')

@app.post('/setup_database/', tags=['–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö'], summary='–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î', response_model=None)
async def setup_database():
    async with task_engine.begin() as conn:
        await conn.run_sync(Base.metadata.drop_all)
        await conn.run_sync(Base.metadata.create_all)

        try:
            return {'‚úÖ –ë–∞–∑–∞ —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞!'}
        except Exception as e:
            return {f'ü§î –•–º–º, –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ! <<{e}>>'}
        
@app.post('/add_regular_task/', tags=['üåô –û–±—ã—á–Ω—ã–µ –∑–∞–¥–∞—á–∏'], summary='–î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É', response_model=None)
async def add_regular_task(task_reg: TaskRegular, data_reg: TaskModel, session: SessionDep_task):
    task_data = session(
        task=task_reg.task,
        status=task_reg.status,
    )

    session.add(task_data)
    await session.commit()

@app.post('add_work_task/', tags=['üíª –†–∞–±–æ—á–∏–∏ –∑–∞–¥–∞—á–∏'], summary='–î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É', response_model=None)
async def add_work_task(task_work: TaskWork):
    pass

@app.post('/add_sport_task/', tags=['üèÜ –°–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏'], summary='–î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É', response_model=None)
async def add_sport_task(task_sport: TaskSport):
    pass

if  __name__ == '__main__':
    uvicorn.run('routs:app', reload=True)